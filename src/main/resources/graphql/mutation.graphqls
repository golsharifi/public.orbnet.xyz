type Mutation {
  # Mining server mutations
  enableMiningServer(serverId: ID!): MiningServerView!
  disableMiningServer(serverId: ID!): MiningServerView!
  startMining(serverId: ID!): MiningActivityView!
  stopMining(serverId: ID!): MiningActivityView!

  # Mining Rewards
  claimMiningRewards(serverId: ID!): MiningRewardResult!
  withdrawTokens(amount: Float!): WithdrawResult!
  claimRewards: MiningRewardResult!

  # Mining Settings
  updateMiningSettings(input: MiningSettingsInput!): MiningSettingsView!

  # Mining Server Prototocol
  updateMiningServerProtocol(
    input: MiningServerProtocolInput!
  ): MiningServerProtocolView!

  # UUID Migration
  migrateUserUuids: Boolean!
  validateUserUuids: MigrationResult!

  # Add webhook mutations to the existing Mutation type
  createWebhookConfiguration(
    input: WebhookConfigurationInput!
  ): WebhookConfiguration!
  updateWebhookConfiguration(
    id: ID!
    input: WebhookConfigurationInput!
  ): WebhookConfiguration!
  deleteWebhookConfiguration(id: ID!): Boolean!
  testWebhookConfiguration(id: ID!): Boolean!

  #QR Code Login
  generateQrCode: QrLoginResponse!
  refreshQrCode(sessionId: String): QrLoginResponse!
  confirmQrLogin(qrCode: String!): Boolean!
  checkQrLoginStatus(sessionId: String!): AuthenticatedUser

  #Notifications:
  whatsAppDisconnect: Boolean!
  whatsAppConnect: Boolean!
  whatsAppDebugState: String!
  whatsAppRegenerateQR: Boolean!
  whatsAppDebugAuthentication: String!

  # Send WhatsApp Notification (by userId or username)
  sendWhatsAppNotification(
    userId: Int
    username: String
    message: String!
  ): Boolean!

  # Send Telegram Notification (by userId or username)
  sendTelegramNotification(
    userId: Int
    username: String
    message: String!
  ): Boolean!

  # Update Telegram Details (by userId or username)
  updateTelegramDetails(
    userId: Int
    username: String
    telegramUsername: String
    telegramChatId: String
  ): Boolean!

  # Telegram Configuration
  configureTelegram(input: TelegramConfigInput!): Boolean!
  disconnectTelegram: Boolean!

  replyToTelegramMessage(messageId: ID!, reply: String!): Boolean!
  markTelegramMessageAsRead(messageId: ID!): Boolean!

  # WhatsApp Configuration
  configureWhatsApp(phoneNumber: String!): Boolean!
  verifyWhatsAppCode(code: String!): Boolean!

  # Messaging Preferences
  updateMessagingPreferences(
    input: MessagingPreferencesInput!
  ): MessagingPreferences!

  # Message Templates
  createMessageTemplate(input: MessageTemplateInput!): MessageTemplate!
  updateMessageTemplate(id: ID!, input: MessageTemplateInput!): MessageTemplate!
  deleteMessageTemplate(id: ID!): Boolean!

  # User Profile Updates
  updateTelegramInfo(username: String!, chatId: String!): UserProfileView!

  # Bulk Messaging
  sendBulkMessage(
    userIds: [ID!]!
    templateId: ID!
    variables: [String!]
    channels: [String!]!
  ): [String!]!

  # Channel Tests
  testWhatsAppConnection(phoneNumber: String!): Boolean!
  testTelegramConnection(chatId: String!): Boolean!

  # Bulk Messaging
  sendBulkTelegramMessage(message: String!, userIds: [Int!]): Boolean!
  sendBulkWhatsAppMessage(message: String!, userIds: [Int!]): Boolean!

  startDripCampaign(channel: String!, message: String!): Boolean
  stopDripCampaign: Boolean
  updateNotificationSettings(batchSize: Int, delayBetweenBatches: Int): Boolean

  updateNotificationPreferences(
    input: NotificationPreferencesInput!
  ): NotificationPreferences!

  #OAuth Login
  oauthLogin(token: String!, socialMedia: SocialMedia!): AuthenticatedUser

  #Single Sign-On
  signup(email: String!, password: String!, referral: String): SignupResponse
  resendVerificationEmail(email: String!): Boolean!
  verifyEmailWithCode(
    email: String!
    verificationCode: String!
  ): AuthenticatedUser!
  verifyResetPasswordCode(email: String!, verificationCode: String!): Boolean
  editProfile(userProfile: UserProfileEdit): UserProfileView
  editAutoRenew(isActive: Boolean!): Boolean
  login(email: String!, password: String!): AuthenticatedUser!
  requestResetPassword(email: String!): Boolean!
  resetPassword(token: String!, password: String!): Boolean!
  changePassword(oldPassword: String!, password: String!): Boolean!
  createServiceGroup(serviceGroup: ServiceGroupEdit!): ServiceGroupView
  editServiceGroup(id: Int!, serviceGroup: ServiceGroupEdit!): ServiceGroupView
  deleteServiceGroup(id: Int!): ServiceGroupView
  createGroup(group: GroupEdit): GroupView
  editGroup(id: Int!, group: GroupEdit): GroupView
  deleteGroup(id: Int!): GroupView
  createServer(server: ServerEdit): ServerView
  editServer(id: Int!, server: ServerEdit): ServerView
  deleteServer(id: Int!): ServerView

  # Token refresh
  refreshToken(refreshToken: String!): AuthenticatedUser!

  # Complete removal of subscription
  removeUserSubscription(username: String!): UserSubscriptionView

  # Revert to previous subscription state
  revertLastSubscriptionChange(username: String!): UserSubscriptionView

  # Revert to specific number of days
  revertSubscriptionToDays(
    username: String!
    remainingDays: Int!
  ): UserSubscriptionView

  # User mutations
  purchaseExtraLogins(
    planId: ID!
    quantity: Int!
    paymentMethod: String!
    selectedCoin: String
  ): PaymentResponse!
  giftExtraLogins(planId: ID!, recipientEmail: String!): Boolean!
  cancelExtraLoginSubscription(subscriptionId: String!): Boolean!

  # Admin mutations
  createExtraLoginPlan(input: ExtraLoginsPlanInput!): ExtraLoginsPlan!
  updateExtraLoginPlan(id: ID!, input: ExtraLoginsPlanInput!): ExtraLoginsPlan!
  deleteExtraLoginPlan(id: ID!): Boolean!

  # admin users
  createNewUserByAdmin(
    groupId: Int
    resellerId: Int
    firstName: String
    lastName: String
    userName: String
    email: String
    devices: String
    country: String
    phone: String
    language: String
  ): UserView
  deleteUser(id: Int): Boolean
  deleteBundleUsers(ids: [Int]): Boolean
  deleteUserAccount: Boolean!
  createUser(user: UserCreate, userProfile: UserProfileEdit): Boolean
  updateSubscription(
    userId: Int
    multiLoginCount: Int
    dailyBandwidth: Float
    downloadUpload: Float
  ): Boolean
  editProfileByAdmin(
    id: Int
    updatedUser: UserCreate
    updatedProfile: UserProfileEdit
  ): Boolean

  # resellers
  createReseller(reseller: ResellerCreate): ResellerView!
  setResellerLevel(resellerId: Int!, level: ResellerLevelName!): ResellerView!
  addResellerCredit(resellerId: Int!, credit: String!): ResellerView!
  editReseller(id: Int!, reseller: ResellerEdit): ResellerView!
  deleteReseller(id: Int!): ResellerView!
  addResellerServiceGroup(resellerId: Int, serviceGroupId: Int): ResellerView!
  removeResellerServiceGroup(
    resellerId: Int
    serviceGroupId: Int
  ): ResellerView!
  resellerCreateUser(user: ResellerUserCreate): UserView!
  resellerEditUser(id: Int!, resellerUserEdit: ResellerUserEdit): UserView!
  resellerEditUserByEmail(
    email: String!
    resellerUserEdit: ResellerUserEdit
  ): UserView!
  resellerDeleteUsers(ids: [Int!]!): [UserView!]
  resellerDeleteUsersByEmails(emails: [String!]!): [UserView!]
  updateResellerLevel(id: Int!, level: ResellerLevelEdit!): ResellerLevelView
  updateResellerLevelCoefficients(
    levelCoefficients: ResellerLevelCoefficientsEdit
  ): ResellerLevelCoefficientsView
  updateResellerScoreLimitBySymbol(
    resellerScoreLimitEdit: ResellerScoreLimitEdit
  ): ResellerScoreLimit
  updateResellerScoreLimits(
    resellerScoreLimitEdits: [ResellerScoreLimitEdit]
  ): [ResellerScoreLimit]
  calculateResellerScore(resellerId: Int): ResellerScore

  # files
  createFile(file: FileEdit): FileView
  editFile(id: Int!, file: FileEdit): FileView
  deleteFile(id: Int!): FileView

  # news
  createNews(news: NewsEdit): NewsView
  editNews(id: Int!, news: NewsEdit): NewsView
  deleteNews(id: Int!): NewsView
  createTicket(ticket: TicketCreate): TicketView
  closeTicket(id: Int!): TicketView
  closeTickets(id: [Int]!): [TicketView]
  replyToTicket(ticketId: Int!, reply: TicketReplyCreate): TicketReplyView

  # payment
  stripeCreatePayment(
    category: PaymentCategory!
    groupId: Int
    moreLoginCount: Int
    renew: Boolean
    paymentMethodId: String!
  ): StripePaymentResponse!

  stripeConfirmPayment(paymentIntentId: String!): StripePaymentResponse!

  stripeUpdateSubscription(
    groupId: Int!
    """
    Stripe subscription ID (starts with 'sub_')
    """
    subscriptionId: String!
  ): StripePaymentResponse!

  stripeCancelSubscription(subscriptionId: String!): Boolean!

  coinpaymentCreatePayment(
    category: PaymentCategory!
    groupId: Int
    moreLoginCount: Int
    coin: String!
  ): CoinPaymentResponse
  coinpaymentCreatePayment2(
    category: PaymentCategory!
    groupId: Int
    moreLoginCount: Int
    coin: String!
  ): AddressResponse

  paypalApprovePayment(orderId: String): PaypalApprovePaymentResponse
  appleCreatePayment(receipt: String): Boolean
  parspalCreatePayment(
    category: PaymentCategory!
    groupId: Int
    moreLoginCount: Int
  ): ParspalCreatePaymentResponse
  parspalApprovePayment(payment_id: String, receipt_number: String): Boolean

  # Token earning and spending
  earnTokens(adVendor: String!, region: String!): TokenBalance!
  spendTokens(minutes: Int!, activeDevices: Int!): TokenBalance!

  # Admin token rate management
  updateTokenRate(input: TokenRateInput!): TokenRate!
  deleteTokenRate(id: ID!): Boolean!

  # Staking operations
  createStakingConfig(input: TokenStakingConfigInput!): TokenStakingConfig!
  updateStakingConfig(
    id: ID!
    input: TokenStakingConfigInput!
  ): TokenStakingConfig!
  deleteStakingConfig(id: ID!): Boolean!
  toggleStakingConfig(id: ID!): TokenStakingConfig!
  stakeTokens(input: StakeTokensInput!): TokenStake!
  unstakeTokens(stakeId: ID!): TokenStake!

  # upload users
  uploadUsers(file: Upload!): Boolean!

  #connections and devices
  disconnectBySessionId(onlineSessionId: String!): Boolean
  disconnectByUserIdAndDeviceId(
    userId: Int!
    deviceIdInput: DeviceIdInput
  ): Boolean
  activateDevice(userId: Int!, deviceIdInput: DeviceIdInput): Boolean
  deactivateDevice(userId: Int!, deviceIdInput: DeviceIdInput): Boolean

  #scheduling
  scheduleEmail(scheduleEmailRequest: ScheduleEmailRequest): Boolean
  sendSms(smsRequest: SmsRequest): Boolean

  #subscription
  # Renewal operations (add to existing subscription)
  renewSubscriptionWithCurrentGroup(username: String!): UserSubscriptionView
  renewSubscriptionWithNewGroup(
    username: String!
    groupId: Int!
  ): UserSubscriptionView
  renewWithDays(username: String!, days: Int!): UserSubscriptionView

  # Reset operations (replace from today)
  resetSubscriptionWithCurrentGroup(username: String!): UserSubscriptionView
  resetSubscriptionWithNewGroup(
    username: String!
    groupId: Int!
  ): UserSubscriptionView

  # Reseller operations
  resellerRenewSubscriptionWithCurrentGroup(
    username: String!
  ): UserSubscriptionView
  resellerRenewSubscriptionWithNewGroup(
    username: String!
    groupId: Int!
  ): UserSubscriptionView
  resellerResetSubscriptionWithCurrentGroup(
    username: String!
  ): UserSubscriptionView
  resellerResetSubscriptionWithNewGroup(
    username: String!
    groupId: Int!
  ): UserSubscriptionView

  # External subscription verification
  verifyAndAssignSubscription(
    userId: Int!
    purchaseToken: String!
    platform: String!
    subscriptionId: String
    packageName: String
  ): SubscriptionResponse

  # Gift Card mutations
  generateGiftCard(input: GiftCardCreateInput!): GiftCard!
  generateBulkGiftCards(input: GiftCardCreateInput!, count: Int!): [GiftCard!]!
  redeemGiftCard(code: String!): GiftCard!
  deleteGiftCard(id: ID!): Boolean!
  cancelGiftCard(id: ID!): GiftCard!
  cancelGiftCards(ids: [ID!]!): [GiftCard!]!

  #Invoice
  updateInvoice(invoiceUpdate: InvoiceUpdate): InvoiceResponse
  emailInvoicePDF(invoicePdf: InvoicePDF): Boolean

  #Discount
  createCouponCode(couponCodeView: CouponCodeView): CouponCode
  updateCouponCode(couponCodeView: CouponCodeView): CouponCode
  checkCouponCode(code: String): CouponCode
  useCouponCode(code: String): CouponCode
  generateTokenCodeForUser(tokenCodeView: TokenCodeView): TokenCodeResponse
  useTokenCode(code: String): TokenCode
  checkTokenCode(code: String): TokenCode

  #User Device
  loginDevice(device: UserDeviceInput!): UserDeviceView
  logoutDeviceByUserDeviceId(userDeviceId: Int!): UserDeviceView
  logoutDeviceByDeviceId(deviceId: String!): UserDeviceView
  resellerLogoutDevice(userId: Int!, deviceId: String!): UserDeviceView
  resellerActivateDevice(deviceId: String!): UserDeviceView
  resellerDeactivateDevice(deviceId: String!): UserDeviceView
  sendNotificationByDeviceId(
    deviceId: String!
    notification: NotificationInput!
  ): FcmNotificationView
  sendNotificationByToken(
    token: String!
    notification: NotificationInput!
  ): FcmNotificationView
  sendNotificationToAll(notification: NotificationInput!): FcmNotificationView
  deleteDevices(userId: Int, username: String): Boolean

  #IP List
  addToWhitelist(ipAddress: String!): Whitelist
  removeFromWhitelist(ipAddress: String!): Boolean
  addToBlacklist(ipAddress: String!): Blacklist
  removeFromBlacklist(ipAddress: String!): Boolean

  # Encryption Mutations
  reEncryptUserPasswordsByRange(
    fromUserId: Int!
    toUserId: Int!
    sendEmail: Boolean!
  ): String!

  # RadCheck Synchronization and Cleanup Mutations
  synchronizeRadCheckPasswords(fromUserId: Int!, toUserId: Int!): String!
  cleanupRadCheckDuplicates(fromUserId: Int!, toUserId: Int!): String!
  getRadCheckDuplicateStats: String!

  # ========== USAGE TRACKING ==========

  #  Record OrbX usage for analytics and billing
  recordOrbXUsage(input: OrbXUsageInput!): OrbXUsageResult!

  # ========== SERVER MANAGEMENT (Admin) ==========

  #  Register a new OrbX server (admin only)
  registerOrbXServer(input: OrbXServerInput!): OrbXServerRegistrationResult!

  #  Update an OrbX server (admin only)
  updateOrbXServer(id: ID!, input: OrbXServerInput!): OrbXServerView!

  #  Delete an OrbX server (admin only)
  deleteOrbXServer(id: ID!): Boolean!

  #  Regenerate server API credentials (admin only)
  regenerateOrbXServerCredentials(id: ID!): OrbXServerRegistrationResult!

  # ========== SERVER STATUS ==========

  #  Update server online status (called by OrbX server on startup/shutdown)
  updateOrbXServerStatus(serverId: ID!, online: Boolean!): OrbXServerView!

  # Update server metrics (called by OrbX server via heartbeat)
  updateOrbXServerMetrics(
    serverId: ID!
    metrics: OrbXServerMetricsInput!
  ): OrbXServerView!

  # ========== WIREGUARD MANAGEMENT ==========

  # Revoke a WireGuard config
  revokeOrbXWireGuardConfig(orbxServerId: ID!): Boolean!
}
