type Query {
  # Mining server queries
  miningServers: [MiningServerView!]!
  miningServersByProtocol(protocol: ProtocolType!): [MiningServerView!]!
  miningServerMetrics(serverId: ID!): ServerMetrics!
  miningActivity: MiningActivityView!
  miningRewards(from: DateTime, to: DateTime): [MiningRewardView!]!
  serverMiningMetrics(serverId: ID!): ServerMiningMetrics!
  miningStats: MiningStats!

  # Get all servers grouped by protocol with sorting
  allServersByProtocol(
    sortBy: SortType
    ascending: Boolean = true
  ): ServersByProtocol!

  # Get servers by protocol with sorting
  serversByProtocol(
    protocol: ProtocolType!
    sortBy: SortType
    ascending: Boolean = true
  ): [MiningServerView!]!

  # Get total statistics
  serverStats: ServerStats!

  # User queries
  myConnectionStats(
    from: DateTime
    to: DateTime
    page: Int = 0
    size: Int = 10
  ): ConnectionStatsPage!

  myConnectionDashboard: UserConnectionDashboard!

  myServerUsageStats(
    serverId: ID!
    from: DateTime
    to: DateTime
  ): ServerUsageStats!

  # Admin queries
  userConnectionStats(
    userId: ID!
    from: DateTime
    to: DateTime
    page: Int = 0
    size: Int = 10
  ): ConnectionStatsPage!

  # Admin queries
  networkAnalytics(from: DateTime, to: DateTime): NetworkAnalytics!

  # Admin export queries
  exportDetailedStats(from: DateTime!, to: DateTime!, userId: ID): String! # Base64 encoded CSV
  exportAggregateStats(
    from: DateTime!
    to: DateTime!
    period: AggregationPeriod!
    userId: ID
  ): String! # Base64 encoded CSV
  adminDashboard: AdminDashboardView!

  # User historical data
  myHistoricalStats(
    period: AggregationPeriod!
    from: DateTime!
    to: DateTime!
  ): HistoricalStatsView!

  # Admin queries
  userHistoricalStats(
    userId: ID!
    period: AggregationPeriod!
    from: DateTime!
    to: DateTime!
  ): HistoricalStatsView!

  serverHistoricalStats(
    serverId: ID!
    period: AggregationPeriod!
    from: DateTime!
    to: DateTime!
  ): HistoricalStatsView!

  # Add webhook queries to the existing Query type
  getWebhookConfigurations: [WebhookConfiguration!]!
  getWebhookConfiguration(id: ID!): WebhookConfiguration
  getWebhookDeliveries(
    configId: ID!
    page: Int!
    size: Int!
  ): [WebhookDelivery!]!

  #Notification
  whatsAppStatus: WhatsAppStatus!
  isDripCampaignRunning: Boolean
  getNotificationSettings: NotificationSettings

  # Telegram Status
  telegramStatus: TelegramStatus!

  # Get user messaging preferences
  getMessagingPreferences: MessagingPreferences!

  # Get all users with Telegram enabled
  getUsersWithTelegram: [UserView!]!

  # Get all users with WhatsApp enabled
  getUsersWithWhatsApp: [UserView!]!

  getMessageTemplates: [MessageTemplate!]!
  getMessageTemplate(id: ID!): MessageTemplate

  # Message Tracking
  getMessageStatus(messageId: String!): MessageDeliveryStatus
  getUserMessageHistory(userId: Int!): [MessageDeliveryStatus!]!

  # Admin notification queries
  getUserNotificationPreferences(userId: ID!): NotificationPreferences!
  getAllUserNotificationPreferences(
    page: Int = 0
    size: Int = 20
  ): NotificationPreferencesPage!
  getNotificationStats: NotificationStats!

  # Rate Limits
  getWhatsAppRateLimit(phoneNumber: String!): Int!
  getTelegramRateLimit(chatId: String!): Int!

  getTelegramMessages(page: Int, size: Int): [TelegramMessage!]!

  getTelegramMessagesByUser(
    userId: ID!
    page: Int
    size: Int
  ): [TelegramMessage!]!

  getNotificationPreferences: NotificationPreferences!

  # User profile queries
  user: UserView
  userProfile: UserProfileView
  userSubscription: UserSubscriptionView
  userLoginDetail(userId: ID!): UserLoginDetail!

  getAllUserRoles: [RoleView]

  gateways: [GatewayView]
  serviceGroup(id: Int!): ServiceGroupView
  serviceGroups: [ServiceGroupView]
  group(id: Int): GroupView
  groups(serviceGroupId: Int!): [GroupView]
  registrationGroups: [GroupView]
  allGroups: [GroupView]

  server(id: Int!): ServerView
  servers: [ServerView]
  clientServers: [ClientServerView]
  getClientSortedServers(
    sortBy: String!
    parameter: String!
  ): [ClientServerView]

  reseller(id: Int!): ResellerView
  resellers: [ResellerView]
  getResellersLevels: [ResellerLevelView]
  getResellersCredits: [ResellerCreditView]
  getResellerLevelCoefficients: ResellerLevelCoefficientsView
  totalResellersCredit: String
  resellerGetUser(id: Int): UserView
  resellerGetUserByEmail(email: String!): UserView
  resellerGetUserByUsername(username: String): UserView
  resellerGetUserById(id: Int): UserView
  resellerGetUsers(page: Int, size: Int): UserPage
  resellerGetExpiredUsers(page: Int, size: Int): UserPage
  getResellerScoreLimits: [ResellerScoreLimit]

  geolocations: [GeolocationView]
  geolocationByName(name: String!): GeolocationView

  news: [NewsView]!
  newsById(id: Int): NewsView!

  files: [FileView]
  file(id: Int): FileView!

  ticket(id: Int): TicketView
  tickets(
    page: Int
    size: Int
    category: TicketCategory
    status: TicketStatus
  ): TicketPage
  userTickets: [TicketView]

  accounting: AccountingView
  totalActiveUsers: Int
  activeUsers(page: Int, size: Int): UserPage
  inactiveUsers(page: Int, size: Int): UserPage
  allUsers(
    sort: Boolean
    page: Int
    size: Int
    param: String
    query: String
  ): UserPage

  #Connections and devices
  getConnectionHistory(userId: Int!): [ConnectionHistoryView]
  getOnlineSessions(userId: Int!): [OnlineSessionView]
  getOnlineUsers(
    page: Int
    size: Int
    serverId: Int
    groupId: Int
    roleId: Int
    serviceGroupId: Int
  ): UserPage
  getDevices(userId: Int!): [DeviceView]
  getDevicesByEmail(email: String!): [DeviceView]

  # Extra Logins
  extraLoginPlans(type: String): [ExtraLoginsPlan!]!
  extraLoginPlan(id: ID!): ExtraLoginsPlan
  userExtraLogins: [UserExtraLogins!]!
  calculateExtraLoginPrice(planId: ID!, quantity: Int!): PriceCalculation!

  # Gift Card queries
  getValidGiftCards: [GiftCard!]!
  getGiftCardsByGroup(groupId: Int!): [GiftCard!]!
  getGiftCardByCode(code: String!): GiftCard

  #Stripe Payment
  getUserStripeSubscriptions: [StripeSubscription!]

  # Token balance queries
  getTokenBalance: TokenBalance!
  getTokenTransactions(
    startDate: LocalDateTime!
    endDate: LocalDateTime!
  ): [TokenTransaction!]!
  getTokenRates(region: String): [TokenRate!]!

  # Daily stats and limits
  getDailyStats: DailyStats!
  getRemainingLimits: RemainingLimits!
  hasDailySubscription: Boolean!
  getMyDailyStats: DailyStats!
  getMyRemainingLimits: RemainingLimits!
  hasMyDailySubscription: Boolean!

  # Admin queries
  getUserDailyStats(userId: ID!): DailyStats!
  getUserRemainingLimits(userId: ID!): RemainingLimits!
  hasUserDailySubscription(userId: ID!): Boolean!
  getGlobalTokenStats: GlobalTokenStats!
  getAllUserTokenStats(
    page: Int = 0
    size: Int = 20
    sortBy: String = "lastActivity"
    ascending: Boolean = false
  ): [UserTokenStats!]!
  searchUserTokenStats(
    searchTerm: String!
    page: Int = 0
    size: Int = 20
  ): [UserTokenStats!]!

  # Staking queries
  getAllStakingConfigs: [TokenStakingConfig!]!
  getStakingConfig(id: ID!): TokenStakingConfig
  getMyStakingOptions: [TokenStakingConfig!]!
  getMyActiveStakes: [TokenStake!]!
  getMyStakingStats: StakingStats!
  getGlobalStakingStats: StakingStats!
  getUserStakingStats(userId: Int!): StakingStats!

  #ReferralCode
  getReferralCode: ReferralCodeView
  getUserById(id: Int): UserView

  #Invoice
  allInvoices: [InvoiceResponse]
  getInvoiceById(invoiceId: Int!): InvoiceResponse
  getInvoiceByPaymentId(paymentId: Int!): InvoiceResponse
  getInvoiceByDateRange(beginDate: String!, endDate: String!): [InvoiceResponse]

  #User Device
  getActiveDevices: [UserDeviceView]
  resellerGetActiveDevices(userId: Int): [UserDeviceView]

  #IP List
  getBlacklistedIPs: [Blacklist!]!
  getWhitelistedIPs: [Whitelist!]!

  #Package Price
  getPackagePrice(groupId: Int!): PackagePrice
  getPackagePrice3(groupId: Int!): PackagePrice3
  getPackagePrice6(groupId: Int!): PackagePrice6
  getPackagePrice12(groupId: Int!): PackagePrice12
  getPackagePrice24(groupId: Int!): PackagePrice24
  getPackagePrice36(groupId: Int!): PackagePrice36
  getPackagePriceLifetime(groupId: Int!): PackagePriceLifetime
  calculateDiscountedPriceByDuration(groupId: Int!): PriceView

  #Check trial eligibility. All parameters are optional. If no parameters provided, checks current user. Admin only when userId/username is provided.
  checkTrialEligibility(
    deviceId: String
    userId: Int
    username: String
  ): TrialEligibilityResponse!

  # ========== SERVER LIST (For Users) ==========

  # Get all online OrbX servers - called once and cached in app
  #  Returns lightweight info for server browsing
  getAllOrbXServers: [OrbXServerInfo!]!

  # Get all OrbX servers with sorting (legacy endpoint)
  orbxServers(sortBy: SortType, ascending: Boolean): [OrbXServerView!]!

  # Get best OrbX server based on load
  bestOrbXServer: OrbXServerView!

  # Get OrbX config for a specific server
  orbxConfig(serverId: ID!): OrbXConfig!

  # ========== ADMIN ENDPOINTS ==========

  # Get all servers (admin only - includes offline/disabled)
  allOrbXServers: [OrbXServerView!]!

  # ========== WIREGUARD ENDPOINTS ==========

  # Get WireGuard config for specific OrbX server
  # Only call this when user actually connects
  getOrbXWireGuardConfig(orbxServerId: ID!): OrbXWireGuardConfigResponse!

  #  List all user's OrbX WireGuard configs
  myOrbXWireGuardConfigs: [OrbXWireGuardConfigResponse!]!
}
